// <auto-generated />
using System;
using FaceGuardPro.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FaceGuardPro.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250820054954_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FaceGuardPro.Data.Entities.AuthenticationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("attempted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AuthenticationResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("authentication_result");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<double?>("FaceMatchScore")
                        .HasColumnType("double precision")
                        .HasColumnName("face_match_score");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("failure_reason");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<double?>("LivenessScore")
                        .HasColumnType("double precision")
                        .HasColumnName("liveness_score");

                    b.Property<TimeSpan?>("ProcessingTime")
                        .HasColumnType("interval")
                        .HasColumnName("processing_time");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("authentication_logs");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employee_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("photo_path");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("position");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("employees");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.FaceTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<string>("Metadata")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("metadata");

                    b.Property<double>("Quality")
                        .HasColumnType("double precision")
                        .HasColumnName("quality");

                    b.Property<byte[]>("TemplateData")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("template_data");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("face_templates");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440001"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8830),
                            Description = "Create, update, delete employees",
                            Name = "ManageEmployees"
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8832),
                            Description = "View employee information",
                            Name = "ViewEmployees"
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440003"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8834),
                            Description = "Manage face templates",
                            Name = "ManageFaceTemplates"
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440004"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8843),
                            Description = "Perform face authentication",
                            Name = "PerformAuthentication"
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440005"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8845),
                            Description = "View system reports",
                            Name = "ViewReports"
                        },
                        new
                        {
                            Id = new Guid("660e8400-e29b-41d4-a716-446655440006"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8847),
                            Description = "System administration",
                            Name = "ManageSystem"
                        });
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8722),
                            Description = "Full system access",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8725),
                            Description = "Employee management and authentication",
                            Name = "Operator"
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8727),
                            Description = "Read-only access",
                            Name = "Viewer"
                        });
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("role_permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-446655440001"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8960),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440001"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001")
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-446655440002"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8970),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001")
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-446655440003"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8973),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440003"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001")
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-446655440004"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8976),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440004"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001")
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-446655440005"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8978),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440005"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001")
                        },
                        new
                        {
                            Id = new Guid("770e8400-e29b-41d4-a716-446655440006"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(8984),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440006"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001")
                        },
                        new
                        {
                            Id = new Guid("780e8400-e29b-41d4-a716-446655440001"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9002),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440001"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440002")
                        },
                        new
                        {
                            Id = new Guid("780e8400-e29b-41d4-a716-446655440002"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9006),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440002")
                        },
                        new
                        {
                            Id = new Guid("780e8400-e29b-41d4-a716-446655440003"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9008),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440003"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440002")
                        },
                        new
                        {
                            Id = new Guid("780e8400-e29b-41d4-a716-446655440004"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9010),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440004"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440002")
                        },
                        new
                        {
                            Id = new Guid("780e8400-e29b-41d4-a716-446655440005"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9012),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440005"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440002")
                        },
                        new
                        {
                            Id = new Guid("790e8400-e29b-41d4-a716-446655440001"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9040),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440002"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440003")
                        },
                        new
                        {
                            Id = new Guid("790e8400-e29b-41d4-a716-446655440002"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 205, DateTimeKind.Utc).AddTicks(9044),
                            PermissionId = new Guid("660e8400-e29b-41d4-a716-446655440005"),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440003")
                        });
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("440e8400-e29b-41d4-a716-446655440001"),
                            CreatedAt = new DateTime(2025, 8, 20, 5, 49, 53, 320, DateTimeKind.Utc).AddTicks(2427),
                            Email = "admin@faceguardpro.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            PasswordHash = "$2a$11$Q4s0VglSWwtaksXyczdpLuYV8Oul9Dq5n0Sv3KOYxWzkqdGSiERGS",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("880e8400-e29b-41d4-a716-446655440001"),
                            AssignedAt = new DateTime(2025, 8, 20, 5, 49, 53, 320, DateTimeKind.Utc).AddTicks(2832),
                            RoleId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            UserId = new Guid("440e8400-e29b-41d4-a716-446655440001")
                        });
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.AuthenticationLog", b =>
                {
                    b.HasOne("FaceGuardPro.Data.Entities.Employee", "Employee")
                        .WithMany("AuthenticationLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.FaceTemplate", b =>
                {
                    b.HasOne("FaceGuardPro.Data.Entities.Employee", "Employee")
                        .WithMany("FaceTemplates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("FaceGuardPro.Data.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("FaceGuardPro.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FaceGuardPro.Data.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.UserRole", b =>
                {
                    b.HasOne("FaceGuardPro.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FaceGuardPro.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.Employee", b =>
                {
                    b.Navigation("AuthenticationLogs");

                    b.Navigation("FaceTemplates");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FaceGuardPro.Data.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
